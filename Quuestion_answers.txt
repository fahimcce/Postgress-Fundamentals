1.What is PostgreSQL? 
PostgreSQL is an open-source, object-relational database management system (ORDBMS) known for its advanced features, scalability, and extensibility. It supports SQL for relational queries and also offers features like full ACID compliance, complex queries, foreign keys, triggers, views, and stored procedures, making it highly flexible and reliable for both small and large-scale applications.

2.What is the purpose of a database schema in PostgreSQL? 
A schema in PostgreSQL is a namespace that organizes database objects (such as tables, views, and functions) into groups. It helps avoid name conflicts by allowing objects with the same name to coexist within different schemas. Schemas also aid in managing access control and data segmentation within a database.

3.Explain the primary key and foreign key concepts in PostgreSQL.
A primary key is a unique identifier for a record in a table. It ensures that no two rows can have the same primary key value and that the key is always non-null.
A foreign key is a field (or a group of fields) in one table that uniquely identifies a row in another table. It establishes a relationship between the two tables and enforces referential integrity by ensuring that a value in the foreign key column corresponds to an existing value in the referenced table's primary key.
4.What is the difference between the VARCHAR and CHAR data types?
VARCHAR (variable-length character) is used for strings of varying length. It can store strings up to a specified length but does not pad the data. For example, VARCHAR(50) will only use as much space as the stored string requires (up to 50 characters).
CHAR (fixed-length character) always uses the same amount of space, padding the stored data with spaces if necessary. For example, CHAR(50) will always take up 50 characters, regardless of the string length.
5.Explain the purpose of the WHERE clause in a SELECT statement. 
The WHERE clause filters records in a query based on specified conditions. It allows you to retrieve only those rows that meet the criteria. For example, SELECT * FROM students WHERE age > 20 will return only the students who are older than 20.

6.What are the LIMIT and OFFSET clauses used for?
The LIMIT clause restricts the number of rows returned by a query. For example, LIMIT 5 will return only the first 5 rows.
The OFFSET clause skips a specified number of rows before starting to return the rows. For example, OFFSET 3 skips the first 3 rows and then returns the result set. Together, they are used for pagination.

7. How can you perform data modification using UPDATE statements? 
The UPDATE statement is used to modify existing records in a table. You specify the table, the columns to update, and the condition (usually in a WHERE clause) to identify which records should be updated. For example:
UPDATE students 
SET status = 'Awarded' 
WHERE student_id = 1;

8. What is the significance of the JOIN operation, and how does it work in PostgreSQL?
 A JOIN operation combines rows from two or more tables based on a related column between them, typically using primary and foreign keys. PostgreSQL supports different types of joins:
INNER JOIN: Returns rows that have matching values in both tables.
LEFT JOIN: Returns all rows from the left table and matched rows from the right table. If thereâ€™s no match, NULL values are returned.
RIGHT JOIN: Returns all rows from the right table and matched rows from the left table.
FULL JOIN: Returns rows when there is a match in either table. Example of an INNER JOIN:
SELECT students.student_name, courses.course_name 
FROM students 
JOIN enrollment ON students.student_id = enrollment.student_id
JOIN courses ON enrollment.course_id = courses.course_id;

9. Explain the GROUP BY clause and its role in aggregation operations. 
The GROUP BY clause is used in conjunction with aggregate functions (such as COUNT, SUM, AVG, etc.) to group rows that have the same values in specified columns. It allows for aggregate calculations for each group. For example, to calculate the number of students in each course:
SELECT course_id, COUNT(student_id) 
FROM enrollment 
GROUP BY course_id;

10. How can you calculate aggregate functions like COUNT, SUM, and AVG in PostgreSQL? PostgreSQL provides aggregate functions to calculate data over multiple rows:
->COUNT(): Counts the number of rows in a result set or distinct values of a column.
SELECT COUNT(*) FROM students;
->SUM(): Adds up numeric values in a column.
SELECT SUM(frontend_mark) FROM students;
->AVG(): Calculates the average of numeric values in a column.
SELECT AVG(age) FROM students;
